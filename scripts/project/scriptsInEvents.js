


const scriptsInEvents = {

	async Tetris_Event1_Act29(runtime, localVars)
	{
		window.ysdk.multiplayer.sessions.init()
	},

	async Tetris_Event2_Act29(runtime, localVars)
	{
		window.ysdk.multiplayer.sessions.init()
	},

	async Tetris_Event115_Act12(runtime, localVars)
	{
		
	},

	async Tetris_Event117_Act1(runtime, localVars)
	{
		window.ysdk.features.GameplayAPI?.start();
	},

	async Menu_Event1_Act1(runtime, localVars)
	{
		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª–∫—É
		if (!localStorage.getItem("playerNumericId")) {
		    const newId = Math.floor(Math.random() * 6000) + 1;
		    localStorage.setItem("playerNumericId", newId);
		    runtime.globalVars.playerNumericId = newId;
		    log("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π playerNumericId: " + newId);
		} else {
		    const savedId = parseInt(localStorage.getItem("playerNumericId"));
		    runtime.globalVars.playerNumericId = savedId;
		    log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω playerNumericId –∏–∑ –ª–æ–∫–∞–ª–∫–∏: " + savedId);
		}
		
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)
		if (!window.ysdk) {
		    YaGames.init().then(ysdk => {
		        window.ysdk = ysdk;
		        console.log("‚úÖ SDK –≥–æ—Ç–æ–≤");
		    });
		}
	},

	async Tetris3_Event22_Act1(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		// –°–æ–æ–±—â–∞–µ–º –æ —Å—Ç–∞—Ä—Ç–µ –≥–µ–π–º–ø–ª–µ—è.
		ysdk.features.GameplayAPI?.start()
		
		// –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω.
	},

	async Tetris3_Event360_Act3(runtime, localVars)
	{
		ysdk.multiplayer.sessions.commit({
		  score: runtime.globalVars.sravnaochi,   // –¢–µ–∫—É—â–∏–µ –æ—á–∫–∏
		  nick: runtime.globalVars.nick           // –ù–∏–∫ –∏–≥—Ä–æ–∫–∞ (—á—Ç–æ–±—ã –±—ã–ª –≤–∏–¥–µ–Ω –≤ –∑–∞–ø–∏—Å–∏)
		});
	},

	async Tetris3_Event735_Act1(runtime, localVars)
	{
		ysdk.multiplayer.sessions.push({
		  meta1: runtime.globalVars.sravnaochi,
		  meta2: runtime.globalVars.nick
		});
	},

	async Gameover_Event1_Act1(runtime, localVars)
	{
try {
    const log = (msg) => {
        const textObj = runtime.objects["—Å—Ä–µ–¥–Ω–µ—Ä–æ–≥–∞16–æ—Ç–ª–∞–¥–∫–∞"].getFirstInstance();
        if (textObj) textObj.text += "\n" + msg;
        else console.log("[Log]", msg);
    };

    const score = parseInt(runtime.globalVars.score) || 0;
    const playerId = parseInt(runtime.globalVars.playerNumericId) || 0;
    const matchCode = 1104; // ‚Üê –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    const meta1 = matchCode * 1_000_000 + score;

    log(`üì§ –ü—É—à —Å–µ—Å—Å–∏–∏: score=${score}, playerId=${playerId}, matchCode=${matchCode}, meta1=${meta1}`);

    window.ysdk.multiplayer.sessions.push({
        meta1: meta1,
        meta2: playerId
    });

    log("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–ø—É—à–µ–Ω–∞!");
} catch (err) {
    const log = (msg) => console.log("[Log]", msg);
    log("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ: " + (err?.message || err));
}
	},

	async Gameover_Event1_Act2(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		
		ysdk.features.GameplayAPI?.stop()
	},

	async Tutu2_Event22_Act1(runtime, localVars)
	{
		(async () => {
		  const log = (msg) => {
		    const textObj = runtime.objects["—Å—Ä–µ–¥–Ω–µ—Ä–æ–≥–∞16–æ—Ç–ª–∞–¥–∫–∞"].getFirstInstance();
		    if (textObj) textObj.text += "\n" + msg;
		    else console.log("[Log]", msg);
		  };
		
		  const myId = parseInt(runtime.globalVars.playerNumericId);
		  const myNick = runtime.globalVars.nick;
		  const played = JSON.parse(localStorage.getItem("playedSessions") || "[]");
		
		  let opponent = null;
		
		  try {
		    const response = await fetch("https://lebmkbapqahnahjeycvd.supabase.co/rest/v1/matches", {
		      method: "GET",
		      headers: {
		        "apikey": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxlYm1rYmFwcWFobmFoamV5Y3ZkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQwODk1OTMsImV4cCI6MjA2OTY2NTU5M30.XpkbQSxJeM-JlrRoBPypVUKPOVeR3kprNt0DgX-FJQU",
		        "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxlYm1rYmFwcWFobmFoamV5Y3ZkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQwODk1OTMsImV4cCI6MjA2OTY2NTU5M30.XpkbQSxJeM-JlrRoBPypVUKPOVeR3kprNt0DgX-FJQU",
		        "Content-Type": "application/json"
		      }
		    });
		
		    const data = await response.json();
		    log("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: " + data.length);
		
		    for (const row of data) {
		      const opId = parseInt(row.idishnik);
		      const opNick = row.nickname;
		
		      if (opId !== myId && opNick !== myNick && !played.includes(opId)) {
		        opponent = row;
		        break;
		      }
		    }
		
		    if (opponent) {
		      log("üéØ –ù–∞–π–¥–µ–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫: " + opponent.nickname + " (id " + opponent.idishnik + ")");
		      runtime.globalVars.OpponentId = parseInt(opponent.idishnik);
		      runtime.globalVars.OpponentName = opponent.nickname;
		      runtime.globalVars.OpponentScoreJSON = opponent.score;
		
		      try {
		        const parsed = JSON.parse(opponent.score);
		
		        if (parsed.c2array && Array.isArray(parsed.data)) {
		          runtime.globalVars.ResizeArrayX = parsed.size[0];
		          runtime.globalVars.ResizeArrayY = parsed.size[1];
		          runtime.globalVars.ResizeArrayZ = parsed.size[2];
		          runtime.globalVars.FlagResizeArray = 1;
		
		          log("üì¶ OpponentScoreJSON –∑–∞–≥—Ä—É–∂–µ–Ω, –º–∞—Å—Å–∏–≤ –≥–æ—Ç–æ–≤ –∫ –≤—Å—Ç–∞–≤–∫–µ. –†–∞–∑–º–µ—Ä: " +
		              parsed.size[0] + "√ó" + parsed.size[1] + "√ó" + parsed.size[2]);
		
		          // ‚¨áÔ∏è –í–°–¢–ê–í–õ–Ø–ï–ú –ó–î–ï–°–¨: —Ä–∞—Å–ø–∞—Ä—Å–∏–º "–æ—á–∫–∏_—Å–µ–∫—É–Ω–¥—ã" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
		          const rawData = parsed.data;
		          const splitArray = rawData.map(entry => {
		            const [score, sec] = entry[0][0].split("_").map(Number);
		            return { score, sec };
		          });
		
		          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª
		          runtime.globalVars.ParsedOpponentArray = JSON.stringify(splitArray);
		          log("üìä –†–∞—Å–ø–∞—Ä—à–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–ø–∏—Å–µ–π: " + splitArray.length);
		        } else {
		          log("‚ö†Ô∏è OpponentScoreJSON –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ");
		        }
		
		      } catch (e) {
		        log("üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ OpponentScoreJSON: " + e.message);
		      }
		
		      played.push(parseInt(opponent.idishnik));
		      localStorage.setItem("playedSessions", JSON.stringify(played));
		      // ‚õîÔ∏è shadowOpponentFound –ù–ï —Ç—Ä–æ–≥–∞–µ–º ‚Äî —Ç—ã –µ–≥–æ —Å–∞–º –≤—ã—Å—Ç–∞–≤–ª—è–µ—à—å –ø–æ–∑–∂–µ
		    } else {
		      log("üïì –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è—é —Å–µ–±—è –≤ –æ–∂–∏–¥–∞–Ω–∏–µ...");
		      runtime.globalVars.shadowOpponentFound = 0;
		      runtime.callFunction("POST_–°–µ–±—è_–í_Supabase");
		    }
		
		  } catch (err) {
		    log("üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + (err?.message || err));
		    runtime.globalVars.shadowOpponentFound = 0;
		  }
		})();
	},

	async Tetrisshadowevent_Event3_Act3(runtime, localVars)
	{
		ysdk.multiplayer.sessions.commit({
		  score: runtime.globalVars.sravnaochi  // –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–≤–æ—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Construct —Å –æ—á–∫–∞–º–∏
		});
	},

	async Tetrisshadowevent_Event4_Act1(runtime, localVars)
	{
		ysdk.on('multiplayer-sessions-transaction', ({ opponentId, transactions }) => {
		  transactions.forEach(transaction => {
		    const score = transaction.payload.score;
		    const nick = transaction.payload.nick;  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–∞ –∏–∑ payload
		
		    runtime.globalVars.opponentScore = score;   // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–∫–∏
		    runtime.globalVars.opponentNick = nick;     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Construct
		  });
		});
		
		ysdk.on('multiplayer-sessions-finish', (opponentId) => {
		  runtime.globalVars.opponentFinished = 1;      // –≠—Ç–æ –æ—Å—Ç–∞–≤–ª—è–π ‚Äî —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
		});
	},

	async Tetrisshadowevent_Event5_Act1(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		// –°–æ–æ–±—â–∞–µ–º –æ —Å—Ç–∞—Ä—Ç–µ –≥–µ–π–º–ø–ª–µ—è.
		ysdk.features.GameplayAPI?.start()
		
		// –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω.
	},

	async Tetrisshadowevent_Event113_Act1(runtime, localVars)
	{
		ysdk.multiplayer.sessions.commit({
		  score: runtime.globalVars.sravnaochi,     // –û—á–∫–∏
		  nick: runtime.globalVars.nick             // –ù–∏–∫
		});
	},

	async Tetrisshadowevent_Event113_Act2(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		
		ysdk.features.GameplayAPI?.stop()
	},

	async Tetrisshadowevent_Event114_Act1(runtime, localVars)
	{
		ysdk.multiplayer.sessions.commit({
		  score: runtime.globalVars.sravnaochi,     // –û—á–∫–∏
		  nick: runtime.globalVars.nick             // –ù–∏–∫
		});
	},

	async Tetrisshadowevent_Event114_Act2(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		
		ysdk.features.GameplayAPI?.stop()
	},

	async Tetrisshadowevent_Event115_Act1(runtime, localVars)
	{
		ysdk.multiplayer.sessions.commit({
		  score: runtime.globalVars.sravnaochi,     // –û—á–∫–∏
		  nick: runtime.globalVars.nick             // –ù–∏–∫
		});
	},

	async Tetrisshadowevent_Event115_Act2(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		
		ysdk.features.GameplayAPI?.stop()
	},

	async Tetrisshadowevent_Event116_Act1(runtime, localVars)
	{
		ysdk.multiplayer.sessions.commit({
		  score: runtime.globalVars.sravnaochi,     // –û—á–∫–∏
		  nick: runtime.globalVars.nick             // –ù–∏–∫
		});
	},

	async Tetrisshadowevent_Event116_Act2(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		
		ysdk.features.GameplayAPI?.stop()
	},

	async Tetrisshadowevent_Event117_Act1(runtime, localVars)
	{
		ysdk.multiplayer.sessions.commit({
		  score: runtime.globalVars.sravnaochi,     // –û—á–∫–∏
		  nick: runtime.globalVars.nick             // –ù–∏–∫
		});
	},

	async Tetrisshadowevent_Event117_Act2(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		
		ysdk.features.GameplayAPI?.stop()
	},

	async Tetrisshadowevent_Event118_Act1(runtime, localVars)
	{
		ysdk.multiplayer.sessions.commit({
		  score: runtime.globalVars.sravnaochi,     // –û—á–∫–∏
		  nick: runtime.globalVars.nick             // –ù–∏–∫
		});
	},

	async Tetrisshadowevent_Event118_Act2(runtime, localVars)
	{
		const ysdk = await YaGames.init();
		
		
		ysdk.features.GameplayAPI?.stop()
	},

	async Tetrisshadoweventreal_Event21_Act1(runtime, localVars)
	{
		
		// –°–æ–æ–±—â–∞–µ–º –æ —Å—Ç–∞—Ä—Ç–µ –≥–µ–π–º–ø–ª–µ—è.
		window.ysdk.features.GameplayAPI?.start()
		
		// –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω.
	},

	async Tetrisshadoweventreal_Event22_Act1(runtime, localVars)
	{
		
		// –°–æ–æ–±—â–∞–µ–º –æ —Å—Ç–∞—Ä—Ç–µ –≥–µ–π–º–ø–ª–µ—è.
		window.ysdk.features.GameplayAPI?.start()
		
		// –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω.
	},

	async Tetrisshadoweventreal_Event261_Act2(runtime, localVars)
	{
		window.ysdk.features.GameplayAPI?.stop()
	},

	async Tetrisshadoweventreal_Event294_Act3(runtime, localVars)
	{
		window.ysdk.multiplayer.sessions.commit({
		    score: runtime.globalVars.sravnaochi
		});
	}

};

self.C3.ScriptsInEvents = scriptsInEvents;

